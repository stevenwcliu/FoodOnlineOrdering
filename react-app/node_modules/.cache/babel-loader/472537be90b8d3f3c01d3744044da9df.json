{"ast":null,"code":"import _classCallCheck from \"/Users/zoezhao/Desktop/CS 157B/dsf/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/zoezhao/Desktop/CS 157B/dsf/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport UserStoreService from \"./UserStoreService\";\n\nvar UserService =\n/*#__PURE__*/\nfunction () {\n  function UserService() {\n    _classCallCheck(this, UserService);\n\n    this.endpoint = 'http://localhost:5000';\n  }\n\n  _createClass(UserService, [{\n    key: \"userLogin\",\n    value: function userLogin(postBody) {\n      var url = this.endpoint + '/login';\n      return fetch(url, {\n        method: 'POST',\n        body: postBody,\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(function (resp) {\n        if (!resp.ok) {\n          throw Error('Sorry the password and username do not match');\n        }\n\n        return resp.json();\n      });\n    }\n  }, {\n    key: \"register_user\",\n    value: function register_user(postBody) {\n      var url = this.endpoint + '/register';\n      return fetch(url, {\n        method: 'POST',\n        body: postBody,\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(function (resp) {\n        if (!resp.ok) {\n          console.log(resp);\n          throw Error('Sorry, user already exist');\n        }\n\n        return resp.json();\n      });\n    }\n  }, {\n    key: \"userInfo\",\n    value: function userInfo() {\n      // let req_headers = {Authorization: 'Bearer ' + UserStoreService.getToken()}\n      var url = this.endpoint + '/userinfo';\n      return fetch(url, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer ' + UserStoreService.getToken()\n        }\n      }).then(function (resp) {\n        if (!resp.ok) {\n          console.log(resp);\n          throw Error('Cannot show User Profile. Please log in.');\n        }\n\n        return resp.json();\n      });\n    }\n  }, {\n    key: \"display_all\",\n    value: function display_all() {\n      var url = this.endpoint + '/display';\n      return fetch(url, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(function (resp) {\n        console.log(resp);\n        return resp.json();\n      });\n    }\n  }, {\n    key: \"getItem\",\n    value: function getItem() {\n      var url = this.endpoint + '/getItem';\n      return fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(function (resp) {\n        console.log(resp);\n        return resp.json();\n      });\n    }\n  }, {\n    key: \"getOrderHistory\",\n    value: function getOrderHistory(postBody) {\n      var url = this.endpoint + '/auth/userorderhistory';\n      return fetch(url, {\n        method: 'GET',\n        body: postBody,\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer ' + UserStoreService.getToken()\n        }\n      }).then(function (resp) {\n        if (!resp.ok) {\n          throw Error('Cannot get order history.');\n        }\n\n        return resp.json();\n      });\n    }\n  }, {\n    key: \"getOrderHistoryDetail\",\n    value: function getOrderHistoryDetail(postBody) {\n      var url = this.endpoint + '/auth/orderdetail';\n      return fetch(url, {\n        method: 'POST',\n        body: postBody,\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer ' + UserStoreService.getToken()\n        }\n      }).then(function (resp) {\n        if (!resp.ok) {\n          throw Error('Cannot get order history Detail.');\n        }\n\n        return resp.json();\n      });\n    }\n  }, {\n    key: \"cancelOrder\",\n    value: function cancelOrder(postBody) {\n      var url = this.endpoint + '/auth/cancelorder';\n      return fetch(url, {\n        method: 'POST',\n        body: postBody,\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer ' + UserStoreService.getToken()\n        }\n      }).then(function (resp) {\n        if (!resp.ok) {\n          throw Error('Cannot get order history Detail.');\n        }\n\n        return resp.json();\n      });\n    }\n  }]);\n\n  return UserService;\n}();\n\nexport default new UserService();","map":{"version":3,"sources":["/Users/zoezhao/Desktop/CS 157B/dsf/src/common/services/User/UserService.js"],"names":["UserStoreService","UserService","endpoint","postBody","url","fetch","method","body","headers","then","resp","ok","Error","json","console","log","getToken"],"mappings":"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","sourcesContent":["import UserStoreService from \"./UserStoreService\";\n\nclass UserService {\n    constructor() {\n        this.endpoint = 'http://localhost:5000'\n    }\n\n    userLogin(postBody) {\n        let url = this.endpoint + '/login';\n        return fetch(url, {\n            method: 'POST',\n            body: postBody,\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }).then((resp) => {\n            if (!resp.ok) {\n                throw Error('Sorry the password and username do not match');\n            }\n            return resp.json();\n        });\n    }\n    register_user(postBody) {\n        let url = this.endpoint + '/register';\n        return fetch(url, {\n            method: 'POST',\n            body: postBody,\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }).then((resp) => {\n            if (!resp.ok) {\n                console.log(resp)\n                throw Error('Sorry, user already exist');\n            }\n            return resp.json();\n        });\n    }\n    userInfo() {\n        // let req_headers = {Authorization: 'Bearer ' + UserStoreService.getToken()}\n        let url = this.endpoint + '/userinfo';\n        return fetch(url, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + UserStoreService.getToken()\n            }\n\n        }).then((resp) => {\n            if (!resp.ok) {\n                console.log(resp)\n                throw Error('Cannot show User Profile. Please log in.');\n            }\n            return resp.json();\n        });\n    }\n    display_all() {\n        let url = this.endpoint + '/display';\n        return fetch(url, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }).then((resp) => {\n            console.log(resp)\n            return resp.json();\n        });\n    }\n    getItem() {\n        let url = this.endpoint + '/getItem';\n        return fetch(url, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }).then((resp) => {\n            console.log(resp)\n            return resp.json();\n        });\n    }\n\n    getOrderHistory(postBody) {\n        let url = this.endpoint + '/auth/userorderhistory';\n        return fetch(url, {\n            method: 'GET',\n            body: postBody,\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + UserStoreService.getToken()\n            }\n        }).then((resp) => {\n            if (!resp.ok) {\n                throw Error('Cannot get order history.');\n            }\n            return resp.json();\n        });\n    }\n    getOrderHistoryDetail(postBody) {\n        let url = this.endpoint + '/auth/orderdetail';\n        return fetch(url, {\n            method: 'POST',\n            body: postBody,\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + UserStoreService.getToken()\n            }\n        }).then((resp) => {\n            if (!resp.ok) {\n                throw Error('Cannot get order history Detail.');\n            }\n            return resp.json();\n        });\n    }\n    cancelOrder(postBody) {\n        let url = this.endpoint + '/auth/cancelorder';\n        return fetch(url, {\n            method: 'POST',\n            body: postBody,\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + UserStoreService.getToken()\n            }\n        }).then((resp) => {\n            if (!resp.ok) {\n                throw Error('Cannot get order history Detail.');\n            }\n            return resp.json();\n        });\n    }\n\n\n\n}\n\nexport default new UserService();\n"]},"metadata":{},"sourceType":"module"}